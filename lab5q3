/*Write a C program to create a child process and both parent and child should share a text file to perform read and write operations on a file. Show how the offset value is shared between parent and the child processes.*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>

int main() {
    int fd;
    pid_t pid;
    
    // Open a file for reading and writing
    fd = open("shared_file.txt", O_CREAT | O_RDWR | O_TRUNC, 0644);
    if (fd < 0) {
        perror("File open failed");
        return 1;
    }
    
    // Write initial content to file
    write(fd, "InitialContent\n", 15);
    
    // Create a child process
    pid = fork();
    
    if (pid < 0) {
        perror("Fork failed");
        return 1;
    }
    
    if (pid == 0) { // Child process
        printf("Child Process: Writing to file...\n");
        write(fd, "ChildWriting\n", 13);
        
        // Get and print file offset
        off_t offset = lseek(fd, 0, SEEK_CUR);
        printf("Child Process: File offset after write: %ld\n", offset);
    } else { // Parent process
        wait(NULL); // Wait for the child process to finish
        printf("Parent Process: Writing to file...\n");
        write(fd, "ParentWriting\n", 14);
        
        // Get and print file offset
        off_t offset = lseek(fd, 0, SEEK_CUR);
        printf("Parent Process: File offset after write: %ld\n", offset);
    }
    
    close(fd); // Close file descriptor
    return 0;
}

